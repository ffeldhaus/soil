# File: backend/app/schemas/round.py
from typing import Optional, List, Any, Dict
from uuid import UUID, uuid4
from datetime import datetime, timezone # MODIFIED: Import timezone

from pydantic import BaseModel, Field, ConfigDict

from .parcel import FieldPublic 

class RoundDecisionBase(BaseModel):
    """
    Base schema for decisions a player makes in a round.
    """
    fertilize: bool = Field(False, description="Conventional fertilizer applied this round")
    pesticide: bool = Field(False, description="Pesticides applied this round")
    biological_control: bool = Field(False, description="Biological pest control (beneficial organisms) applied") 
    attempt_organic_certification: bool = Field(False, description="Attempting to achieve/maintain organic certification this round")
    machine_investment_level: int = Field(
        0,
        ge=0,
        le=50, 
        description="Level of investment in new machinery or increased machine usage (e.g., 0-50%)"
    )

class RoundBase(BaseModel):
    """
    Base properties for a Round.
    """
    game_id: str = Field(..., description="ID of the game this round belongs to")
    player_id: str = Field(..., description="UID of the player this round belongs to")
    round_number: int = Field(..., ge=1, description="The sequential number of this round in the game")
    decisions: Optional[RoundDecisionBase] = Field(None, description="Player's decisions for this round")
    is_submitted: bool = Field(False, description="Whether the player has submitted their decisions for this round")
    submitted_at: Optional[datetime] = Field(None, description="Timestamp when the round was submitted")
    model_config = ConfigDict(use_enum_values=True)


class RoundCreate(RoundBase):
    """
    Properties to receive when creating a round instance for a player.
    """
    decisions: RoundDecisionBase = Field(default_factory=RoundDecisionBase, description="Initial (default) decisions for the round")

class RoundUpdate(BaseModel): 
    """
    Properties to receive when a player updates their round (submits decisions).
    """
    decisions: RoundDecisionBase = Field(..., description="Player's decisions for this round")
    is_submitted: bool = Field(True, description="Mark round as submitted") 
    model_config = ConfigDict(extra='forbid')


class RoundInDBBase(RoundBase):
    """
    Base properties for a Round as stored in the database.
    """
    id: str = Field(..., description="Unique ID for the round document (e.g., auto-generated by Firestore or composite)")
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc)) # MODIFIED
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc)) # MODIFIED
    model_config = ConfigDict(from_attributes=True)


class RoundInDB(RoundInDBBase):
    """
    Represents a Round object as stored in the database.
    """
    pass


class RoundPublic(RoundInDBBase):
    """
    Properties to return to the client for a round.
    """
    pass

class RoundSimple(BaseModel):
    id: str
    game_id: str
    player_id: str
    round_number: int
    is_submitted: bool
    submitted_at: Optional[datetime] = None
    model_config = ConfigDict(from_attributes=True)


class RoundWithFieldPublic(RoundPublic):
    """
    Extends RoundPublic with the player's field state (parcels) for the current round.
    """
    field_state: FieldPublic = Field(..., description="The current state of the player's field for this round")
    model_config = ConfigDict(from_attributes=True)