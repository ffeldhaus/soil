from typing import Optional, List, Any
from uuid import UUID # For potential game_id if it's a UUID

from pydantic import BaseModel, EmailStr, Field, ConfigDict

from .user import UserBase, UserCreate, UserInDBBase, UserPublic, UserType
# from .round import RoundSummary # To be created - for player's current round info
# from .game import GameSimple # To be created - for player's game info

# --- Properties shared by models stored in DB ---
class PlayerBase(UserBase):
    """
    Base properties for a Player user.
    """
    user_type: UserType = Field(default=UserType.PLAYER, frozen=True, description="Type of the user, fixed to player")
    username: Optional[str] = Field(None, max_length=50, description="Player's display name or username in the game")
    game_id: Optional[str] = Field(None, description="ID of the game the player belongs to (Firestore document ID or custom ID)")
    # Player number within the game, e.g., Player 1, Player 2
    player_number: Optional[int] = Field(None, ge=1, description="Player's number within the game")

    model_config = ConfigDict(use_enum_values=True)


# --- Properties to receive via API on creation ---
# Player creation is typically handled by an Admin when setting up a game.
# The admin would provide minimal info, and a simple password might be auto-generated.
class PlayerCreate(UserCreate, PlayerBase): # Multiple inheritance
    """
    Schema for creating a new Player.
    Inherits email and password from UserCreate, and other fields from PlayerBase.
    The 'email' for a player might be auto-generated (e.g., player<N>@game<ID>.soil.app)
    and password auto-generated by the system when an admin creates the game/player slot.
    """
    user_type: UserType = Field(default=UserType.PLAYER, frozen=True, exclude=True) # Exclude from request body

    # For player creation, email and password might be system-generated
    # or provided by an admin.
    email: EmailStr = Field(..., description="Player's email address (must be unique for Firebase Auth, could be system-generated)")
    password: str = Field(..., min_length=6, description="Player's password (can be simpler if system-generated, e.g., 6 characters)") # Shorter min_length for player
    
    username: Optional[str] = Field(None, max_length=50, description="Player's display name (optional, can default to Player X)")
    game_id: str = Field(..., description="ID of the game the player is being added to")
    player_number: Optional[int] = Field(None, ge=1, description="Player's number within the game (can be assigned by the system)")


# --- Properties to receive via API on update (by player themselves or admin) ---
class PlayerUpdate(BaseModel):
    """
    Schema for updating a Player. All fields are optional.
    Players might only be able to update their username or password.
    Admins might be able to update more.
    """
    username: Optional[str] = Field(None, max_length=50, description="Player's display name")
    # email: Optional[EmailStr] = None # Usually, players don't change their primary email/login
    password: Optional[str] = Field(None, min_length=6, description="New password (if changing)")
    is_active: Optional[bool] = Field(None, description="Whether the player account is active (admin action)")
    
    # player_number and game_id are typically not updatable by the player.
    model_config = ConfigDict(extra='forbid')


# --- Properties stored in DB ---
class PlayerInDB(UserInDBBase, PlayerBase): # Multiple inheritance
    """
    Schema for Player properties as stored in the database.
    Inherits uid from UserInDBBase, and other fields from PlayerBase.
    """
    # Game ID is crucial here
    game_id: str = Field(..., description="ID of the game the player belongs to")
    # player_number could also be stored if it's a fixed identifier within the game context
    
    # Example of game-specific progress or state, if stored directly on player doc:
    # current_round_id: Optional[str] = None
    # total_score: int = 0
    pass


# --- Properties to return to client (Public Player Information) ---
class PlayerPublic(UserPublic, PlayerBase): # Multiple inheritance
    """
    Schema for publicly available Player information.
    Inherits uid from UserPublic, and other fields from PlayerBase.
    Excludes sensitive information like password.
    """
    # Override or ensure fields from PlayerBase are included
    username: Optional[str] = Field(None, max_length=50, description="Player's display name or username in the game")
    game_id: Optional[str] = Field(None, description="ID of the game the player belongs to")
    player_number: Optional[int] = Field(None, ge=1, description="Player's number within the game")

    # Current game-related info might be useful
    # current_game_info: Optional[GameSimple] = None
    # current_round_info: Optional[RoundSummary] = None
    
    model_config = ConfigDict(from_attributes=True)