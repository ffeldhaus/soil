[tool.poetry]
name = "soil-game-backend"
version = "0.1.0"
description = "Backend for the Soil educational game, rewritten in Python."
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.md" # Will be created later in the main project root

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.30.1"}
pydantic = {extras = ["email"], version = "^2.7.1"}
pydantic-settings = "^2.3.1"
# For Firebase Admin SDK (Authentication, Firestore)
firebase-admin = "^6.5.0"
# For password hashing
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
# For sending emails (e.g., registration confirmation)
python-multipart = "^0.0.9" # For form data in FastAPI
aiosmtplib = "^3.0.1" # For async email sending
# For I18N - though FastAPI doesn't have a direct equivalent to Rails I18n,
# we can use standard libraries if needed for error messages, etc.
# For now, focusing on frontend I18N.

# Optional: If choosing Cloud SQL (PostgreSQL) instead of/alongside Firestore
# asyncpg = "^0.29.0" # For asyncio PostgreSQL driver
# sqlalchemy = {extras = ["asyncio"], version = "^2.0.30"}
# alembic = "^1.13.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.7"
httpx = "^0.27.0" # For testing FastAPI endpoints
black = "^24.4.2"
ruff = "^0.4.4"
mypy = "^1.10.0"
pre-commit = "^3.7.1"
# For generating .env files from .env.example
python-dotenv = {extras = ["cli"], version = "^1.0.1"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py313']

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "RUF",# Ruff-specific rules
]
ignore = [
    "E501", # Line too long, handled by black
]
fix = true
target-version = "py313"

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with true, can be refined
disallow_untyped_defs = true
check_untyped_defs = true
# Enable strict mode options selectively as the project matures
# strict = true

[[tool.mypy.overrides]]
module = [
    "firebase_admin.*", # Firebase Admin SDK might not have perfect stubs
    "passlib.*",
    "jose.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = ["."]
# Add test file patterns if needed, e.g., testpaths = ["tests"]