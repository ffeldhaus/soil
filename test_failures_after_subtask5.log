============================= test session starts ==============================
platform linux -- Python 3.13.3, pytest-8.3.5, pluggy-1.6.0
rootdir: /app/backend
configfile: pyproject.toml
plugins: asyncio-1.0.0, cov-6.1.1, anyio-4.9.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 44 items

tests/crud/test_crud_admin.py F..FF.......                               [ 27%]
tests/crud/test_crud_player.py FF...F....F...                            [ 59%]
tests/crud/test_crud_result.py FF.F.F.                                   [ 75%]
tests/crud/test_crud_round.py F..........                                [100%]

=================================== FAILURES ===================================
__________________________ test_create_admin_with_uid __________________________

crud_admin_instance = <app.crud.crud_admin.CRUDAdmin object at 0x7fa478ce4e10>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344371759824'>
admin_create_obj = AdminCreate(email='admin@example.com', user_type=<UserType.ADMIN: 'admin'>, is_active=True, is_superuser=False, first_name='Test', last_name='Admin', full_name=None, institution='Test University', password='securepassword123')
mock_doc_snapshot = <MagicMock spec='DocumentSnapshot' id='140344371764528'>

    @pytest.mark.asyncio
    async def test_create_admin_with_uid(
        crud_admin_instance: CRUDAdmin,
        mock_firestore_db: AsyncFirestoreClient,
        admin_create_obj: AdminCreate,
        mock_doc_snapshot: MagicMock # Used to mock the .get() call after .set()
    ):
        # Arrange
        mock_collection_ref = mock_firestore_db.collection(settings.FIRESTORE_COLLECTION_ADMINS)
        # document(ADMIN_UID) is already configured by mock_doc_snapshot to return it on .get()
        mock_doc_ref_for_admin_uid = mock_collection_ref.document(ADMIN_UID)

        # Patch 'get_password_hash' and 'datetime' in 'app.crud.crud_admin'
        with patch("app.crud.crud_admin.get_password_hash", return_value="hashed_password_example_from_get_password_hash") as mock_hash, \
             patch("app.crud.crud_admin.datetime") as mock_datetime_module:
            mock_datetime_module.now.return_value = FIXED_DATETIME_NOW
            mock_datetime_module.utcnow.return_value = FIXED_DATETIME_NOW # If utcnow is used (some CRUD methods might use it for consistency)

            # Act - Single call to the method under test
            created_admin_dict = await crud_admin_instance.create_with_uid(
                db=mock_firestore_db, uid=ADMIN_UID, obj_in=admin_create_obj
            )

        # Assert
        assert created_admin_dict is not None, "create_with_uid should return a dictionary."
        # Ensure the dictionary from Firestore can be parsed into AdminInDB model
        created_admin = AdminInDB(**created_admin_dict)

        # 1. Check what was passed to Firestore's .set() method on the specific mock_doc_ref
        # The mock_doc_ref_for_admin_uid is already configured by mock_firestore_db fixture
        # to be the one associated with ADMIN_UID.
        mock_doc_ref_for_admin_uid.set.assert_called_once()
        args_to_set, _ = mock_doc_ref_for_admin_uid.set.call_args
        actual_set_data = args_to_set[0]

        assert actual_set_data["uid"] == ADMIN_UID
        assert actual_set_data["email"] == admin_create_obj.email
        assert actual_set_data["hashed_password"] == "hashed_password_example_from_get_password_hash"
        # full_name should be constructed from first_name and last_name by CRUDAdmin.create_with_uid
        expected_full_name = f"{admin_create_obj.first_name} {admin_create_obj.last_name}"
        assert actual_set_data["full_name"] == expected_full_name
        assert actual_set_data["created_at"] == FIXED_DATETIME_NOW
        assert actual_set_data["updated_at"] == FIXED_DATETIME_NOW
        # is_superuser is set to True by default in CRUDAdmin.create_with_uid
        assert actual_set_data["is_superuser"] is True
        # is_active is set to True by default in CRUDAdmin.create_with_uid (from UserBase via AdminCreate)
        assert actual_set_data["is_active"] is True
        # user_type is set to "admin" by default in CRUDAdmin.create_with_uid (from AdminBase via AdminCreate)
        assert actual_set_data["user_type"] == "admin"

        # 2. Check the returned AdminInDB object (which comes from the snapshot mock)
        # The mock_doc_snapshot returns ADMIN_IN_DB_DICT_BASE data.
        # We need to ensure its full_name also matches the expected constructed full_name for this test.
        # Or, more accurately, the snapshot should reflect what *would have been written* to the DB.
        # The created_admin_dict comes from doc_ref.get() after set. So it *should* match actual_set_data.
        assert created_admin.uid == ADMIN_UID
>       assert created_admin.id == ADMIN_UID

tests/crud/test_crud_admin.py:171:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = AdminInDB(email='admin@example.com', user_type='admin', is_active=True, is_superuser=True, first_name='Test', last_nam...1, 12, 0, tzinfo=datetime.timezone.utc), updated_at=datetime.datetime(2023, 1, 1, 12, 0, tzinfo=datetime.timezone.utc))
item = 'id'

    def __getattr__(self, item: str) -> Any:
        private_attributes = object.__getattribute__(self, '__private_attributes__')
        if item in private_attributes:
            attribute = private_attributes[item]
            if hasattr(attribute, '__get__'):
                return attribute.__get__(self, type(self))  # type: ignore

            try:
                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
                return self.__pydantic_private__[item]  # type: ignore
            except KeyError as exc:
                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
        else:
            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
            # See `BaseModel.__repr_args__` for more details
            try:
                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
            except AttributeError:
                pydantic_extra = None

            if pydantic_extra:
                try:
                    return pydantic_extra[item]
                except KeyError as exc:
                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
            else:
                if hasattr(self.__class__, item):
                    return super().__getattribute__(item)  # Raises AttributeError if appropriate
                else:
                    # this is the current error
>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E                   AttributeError: 'AdminInDB' object has no attribute 'id'. Did you mean: 'uid'?

.venv/lib/python3.13/site-packages/pydantic/main.py:991: AttributeError
______________________________ test_update_admin _______________________________

crud_admin_instance = <app.crud.crud_admin.CRUDAdmin object at 0x7f5375e2fce0>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='139996431658560'>
admin_update_obj = AdminUpdate(email='updated.admin@example.com', first_name='UpdatedTest', last_name='AdminUser', institution='Updated University', is_active=None, password=None)
mock_doc_snapshot = <MagicMock spec='DocumentSnapshot' id='139996434416032'>

    @pytest.mark.asyncio
    async def test_update_admin(
        crud_admin_instance: CRUDAdmin,
        mock_firestore_db: AsyncFirestoreClient,
        admin_update_obj: AdminUpdate,
        mock_doc_snapshot: MagicMock # Represents state *before* update for the first .get()
    ):
        # Arrange
        mock_collection_ref = mock_firestore_db.collection(settings.FIRESTORE_COLLECTION_ADMINS)
        mock_doc_ref_for_admin_uid = mock_collection_ref.document(ADMIN_UID)

        # Data for snapshot returned *after* update.
        # This should reflect the changes made by admin_update_obj.
        # Original created_at, user_type, and hashed_password should remain.
        original_doc_data_before_update = mock_doc_snapshot.to_dict() # Data from ADMIN_IN_DB_DICT_BASE + timestamps
        expected_full_name_after_update = f"{admin_update_obj.first_name} {admin_update_obj.last_name}"

        data_after_update_dict = {
            **original_doc_data_before_update, # Start with existing data
            "first_name": admin_update_obj.first_name,
            "last_name": admin_update_obj.last_name,
            "full_name": expected_full_name_after_update,
            "email": admin_update_obj.email,
            "institution": admin_update_obj.institution,
            "updated_at": FIXED_DATETIME_LATER, # This will be set by the update method in CRUDAdmin
            # Fields that should NOT change:
            "created_at": original_doc_data_before_update["created_at"],
            "hashed_password": original_doc_data_before_update["hashed_password"],
            "user_type": UserType(original_doc_data_before_update["user_type"]), # Ensure enum member
            "is_superuser": original_doc_data_before_update["is_superuser"],
            # is_active can be changed by AdminUpdate, so if it's in admin_update_obj, it should be here
            "is_active": admin_update_obj.is_active if admin_update_obj.is_active is not None else original_doc_data_before_update["is_active"],
        }

        mock_snapshot_after_update = MagicMock(spec=DocumentSnapshot)
        mock_snapshot_after_update.exists = True
        mock_snapshot_after_update.to_dict.return_value = data_after_update_dict
        mock_snapshot_after_update.id = ADMIN_UID

        # CRUDBase.update calls doc_ref.update() then doc_ref.get().
        # The mock_doc_snapshot fixture (passed to this test) represents the state *before* this update.
        # It's used by CRUDBase if it internally calls .get() before .update() (which it doesn't explicitly).
        # More importantly, the .get() *after* the .update() call needs to return the new state.
        mock_doc_ref_for_admin_uid.get = AsyncMock(return_value=mock_snapshot_after_update)


        # Patch datetime.now() in app.crud.crud_admin.py as it's used by CRUDAdmin.update
        with patch("app.crud.crud_admin.datetime") as mock_datetime_crud_admin_module:
            # Mock datetime.now(timezone.utc) specifically if that's what's used.
            # If it's just datetime.now(), this is fine.
            mock_datetime_crud_admin_module.now.return_value = FIXED_DATETIME_LATER # Time of update

            # Act
            updated_admin_dict = await crud_admin_instance.update(
                db=mock_firestore_db, doc_id=ADMIN_UID, obj_in=admin_update_obj
            )

        # Assert
        assert updated_admin_dict is not None, "Update should return the updated admin dictionary."
        updated_admin = AdminInDB(**updated_admin_dict)

        # 1. Check what was passed to Firestore's .update() method
        mock_doc_ref_for_admin_uid.update.assert_called_once()
        args_to_update, _ = mock_doc_ref_for_admin_uid.update.call_args
        actual_update_payload = args_to_update[0]

        assert "password" not in actual_update_payload, "Plain password should not be in Firestore update payload."
        assert "hashed_password" not in actual_update_payload, "Hashed password should not be sent directly in this payload."
        assert actual_update_payload["first_name"] == admin_update_obj.first_name
        assert actual_update_payload["last_name"] == admin_update_obj.last_name
        assert actual_update_payload["email"] == admin_update_obj.email
        assert actual_update_payload["institution"] == admin_update_obj.institution
        assert actual_update_payload["full_name"] == expected_full_name_after_update
        assert actual_update_payload["updated_at"] == FIXED_DATETIME_LATER # This must be set by CRUDAdmin.update
        if admin_update_obj.is_active is not None:
            assert actual_update_payload["is_active"] == admin_update_obj.is_active

        # 2. Check the returned AdminInDB object (comes from the .get() call after update)
        assert updated_admin.first_name == admin_update_obj.first_name
        assert updated_admin.full_name == expected_full_name_after_update
        assert updated_admin.email == admin_update_obj.email
        assert updated_admin.institution == admin_update_obj.institution
        if admin_update_obj.is_active is not None:
            assert updated_admin.is_active == admin_update_obj.is_active
        else:
            assert updated_admin.is_active == original_doc_data_before_update["is_active"]

        assert updated_admin.updated_at == FIXED_DATETIME_LATER
        assert updated_admin.created_at == original_doc_data_before_update["created_at"], "created_at should not change."
>       assert updated_admin.user_type.value == original_doc_data_before_update["user_type"], "user_type should not change by default."
E       AttributeError: 'str' object has no attribute 'value'

tests/crud/test_crud_admin.py:334: AttributeError
______________________ test_update_admin_ignores_password ______________________

crud_admin_instance = <app.crud.crud_admin.CRUDAdmin object at 0x7f5375b89250>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='139996431657216'>
mock_doc_snapshot = <MagicMock spec='DocumentSnapshot' id='139996434418384'>

    @pytest.mark.asyncio
    async def test_update_admin_ignores_password(
        crud_admin_instance: CRUDAdmin,
        mock_firestore_db: AsyncFirestoreClient,
        mock_doc_snapshot: MagicMock # Represents current state in DB (before this specific test's update)
    ):
        # Arrange
        mock_collection_ref = mock_firestore_db.collection(settings.FIRESTORE_COLLECTION_ADMINS)
        mock_doc_ref_for_admin_uid = mock_collection_ref.document(ADMIN_UID)

        original_doc_data = mock_doc_snapshot.to_dict()
        original_hashed_password = original_doc_data["hashed_password"]
        original_created_at = original_doc_data["created_at"]
        original_user_type_str = original_doc_data["user_type"] # e.g., "admin"
        original_is_superuser = original_doc_data["is_superuser"]
        original_is_active = original_doc_data["is_active"]


        update_payload_with_password = AdminUpdate(
            first_name="PasswordTestFirstName", # Changed field
            # last_name, email, institution will be None, so they shouldn't be in payload unless model_dump(exclude_none=False)
            # CRUDAdmin.update uses obj_in.model_dump(exclude_unset=True, exclude_none=True)
            # So only first_name and password (which is then deleted) will be in update_data from AdminUpdate.
            password="newfakepassword123" # This should be ignored by CRUDAdmin.update logic
        )

        # Data for snapshot returned *after* this specific update attempt.
        # Only first_name and updated_at should change. Password-related fields remain untouched.
        data_after_update_attempt_dict = {
            **original_doc_data, # Start with existing data
            "first_name": update_payload_with_password.first_name,
            # full_name should also update if first_name changes and last_name is present
            "full_name": f"{update_payload_with_password.first_name} {original_doc_data['last_name']}",
            "updated_at": FIXED_DATETIME_LATER, # This will be set by CRUDAdmin.update
            # Fields that should NOT change:
            "hashed_password": original_hashed_password,
            "created_at": original_created_at,
            "user_type": UserType(original_user_type_str), # Ensure enum member
            "email": original_doc_data["email"], # Unchanged as not in update_payload_with_password
            "last_name": original_doc_data["last_name"], # Unchanged
            "institution": original_doc_data["institution"], # Unchanged
            "is_superuser": original_is_superuser, # Unchanged
            "is_active": original_is_active, # Unchanged
        }
        mock_snapshot_after_update_attempt = MagicMock(spec=DocumentSnapshot)
        mock_snapshot_after_update_attempt.exists = True
        mock_snapshot_after_update_attempt.to_dict.return_value = data_after_update_attempt_dict
        mock_snapshot_after_update_attempt.id = ADMIN_UID

        # Configure .get() on the specific doc ref to return the state *after* the update call
        mock_doc_ref_for_admin_uid.get = AsyncMock(return_value=mock_snapshot_after_update_attempt)

        with patch("app.crud.crud_admin.datetime") as mock_datetime_module:
            mock_datetime_module.now.return_value = FIXED_DATETIME_LATER # Time of update

            # Act
            updated_admin_dict = await crud_admin_instance.update(
                db=mock_firestore_db, doc_id=ADMIN_UID, obj_in=update_payload_with_password
            )

        # Assert
        assert updated_admin_dict is not None, "Update should return a dictionary even if only timestamps change."
        updated_admin = AdminInDB(**updated_admin_dict)

        # 1. Check what was passed to Firestore's .update() method
        mock_doc_ref_for_admin_uid.update.assert_called_once()
        args_to_update, _ = mock_doc_ref_for_admin_uid.update.call_args
        actual_update_payload = args_to_update[0]

        assert "password" not in actual_update_payload, "Plain password should NOT be in Firestore update payload."
        assert "hashed_password" not in actual_update_payload, "Hashed password should NOT be in this update payload."
        assert actual_update_payload["first_name"] == update_payload_with_password.first_name
        assert "last_name" not in actual_update_payload # Was not in AdminUpdate with exclude_none=True
        assert "email" not in actual_update_payload # Was not in AdminUpdate
        assert actual_update_payload["full_name"] == f"{update_payload_with_password.first_name} {original_doc_data['last_name']}"
        assert actual_update_payload["updated_at"] == FIXED_DATETIME_LATER

        # 2. Check the returned AdminInDB object
        assert updated_admin.first_name == update_payload_with_password.first_name
        assert updated_admin.full_name == f"{update_payload_with_password.first_name} {original_doc_data['last_name']}"
        assert updated_admin.email == original_doc_data["email"] # Unchanged
        assert updated_admin.hashed_password == original_hashed_password, "Hashed password must remain unchanged."
        assert updated_admin.updated_at == FIXED_DATETIME_LATER
        assert updated_admin.created_at == original_created_at, "created_at must remain unchanged."
>       assert updated_admin.user_type.value == original_user_type_str, "user_type must remain unchanged."
E       AttributeError: 'str' object has no attribute 'value'

tests/crud/test_crud_admin.py:422: AttributeError
________________________ test_get_player_by_email_found ________________________

crud_player_instance = <app.crud.crud_player.CRUDPlayer object at 0x7fa4789cc7d0>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344372893008'>
mock_player_doc_snapshot = <MagicMock spec='DocumentSnapshot' id='140344371771920'>

    @pytest.mark.asyncio
    async def test_get_player_by_email_found(
        crud_player_instance: CRUDPlayer,
        mock_firestore_db: AsyncFirestoreClient, # From conftest.py
        mock_player_doc_snapshot: MagicMock # Specific player snapshot
    ):
        mock_collection_ref = mock_firestore_db.collection(settings.FIRESTORE_COLLECTION_USERS)
        mock_query = AsyncMock(spec=AsyncQuery)
        mock_collection_ref.where.return_value = mock_query

        async def stream_results_gen(*args, **kwargs): yield mock_player_doc_snapshot
        # query.limit(1).stream() -> query.limit() returns a new query object.
        # So, the final object that .stream() is called on needs to have .stream mocked.
        mock_limit_query = AsyncMock(spec=AsyncQuery)
        mock_query.limit = MagicMock(return_value=mock_limit_query)
        mock_limit_query.stream = MagicMock(return_value=stream_results_gen())


        player_dict_or_model = await crud_player_instance.get_by_email(db=mock_firestore_db, email=PLAYER_EMAIL)
        assert player_dict_or_model is not None
        player = player_dict_or_model # Changed: crud.get_by_email returns a model instance

        # Comprehensive assertions
        assert player.uid == PLAYER_UID
        # assert player.id == PLAYER_UID # id is not a field on PlayerInDB, uid is the id.
        assert player.email == PLAYER_EMAIL
        assert player.game_id == TEST_GAME_ID_FOR_PLAYER
        assert player.player_number == PLAYER_NUMBER
        assert player.username == BASE_PLAYER_IN_DB_DICT["username"]
        assert player.user_type == UserType.PLAYER
        assert player.is_active == BASE_PLAYER_IN_DB_DICT["is_active"]
        assert player.is_superuser == BASE_PLAYER_IN_DB_DICT["is_superuser"]
        assert player.created_at == FIXED_DATETIME_NOW_PLAYER
        assert player.updated_at == FIXED_DATETIME_NOW_PLAYER
        assert player.current_capital == BASE_PLAYER_IN_DB_DICT["current_capital"]
        assert player.is_ai == BASE_PLAYER_IN_DB_DICT["is_ai"]
        assert player.ai_strategy == BASE_PLAYER_IN_DB_DICT["ai_strategy"]
        assert player.temp_password_hash == BASE_PLAYER_IN_DB_DICT["temp_password_hash"]

>       mock_collection_ref.where.assert_called_once_with(field="email", op_string="==", value=PLAYER_EMAIL)

tests/crud/test_crud_player.py:218:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/home/swebot/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:991: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='mock.where' id='140344371767216'>
args = (), kwargs = {'field': 'email', 'op_string': '==', 'value': 'player.test@example.com'}
expected = call(field='email', op_string='==', value='player.test@example.com')
actual = call(field='email', op_string='==', value='player.test@example.com')
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fa478751c60>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.

        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)

        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: where('email', '==', 'player.test@example.com')
E             Actual: where(field='email', op_string='==', value='player.test@example.com')

/home/swebot/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/unittest/mock.py:979: AssertionError
______________________ test_get_players_by_game_id_found _______________________

crud_player_instance = <app.crud.crud_player.CRUDPlayer object at 0x7fa478b9e9c0>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344374291360'>
mock_player_doc_snapshot = <MagicMock spec='DocumentSnapshot' id='140344372582048'>

    @pytest.mark.asyncio
    async def test_get_players_by_game_id_found(
        crud_player_instance: CRUDPlayer,
        mock_firestore_db: AsyncFirestoreClient, # From conftest.py
        mock_player_doc_snapshot: MagicMock
    ):
        mock_collection_ref = mock_firestore_db.collection(settings.FIRESTORE_COLLECTION_USERS)
        mock_query = AsyncMock(spec=AsyncQuery)
        mock_collection_ref.where.return_value = mock_query # .where().limit() if limit is part of query

        async def stream_results_gen(*args, **kwargs): yield mock_player_doc_snapshot
        mock_query.stream = MagicMock(return_value=stream_results_gen())

        players_list = await crud_player_instance.get_players_by_game_id(
            db=mock_firestore_db, game_id=TEST_GAME_ID_FOR_PLAYER, limit=10 # Explicit limit
        )

        mock_collection_ref.where.assert_called_once_with(field="game_id", op_string="==", value=TEST_GAME_ID_FOR_PLAYER)
        mock_query.limit.assert_called_once_with(10) # Check limit passed to query

>       assert len(players_list) == 1
E       assert 0 == 1
E        +  where 0 = len([])

tests/crud/test_crud_player.py:365: AssertionError
_______________________ test_create_player_round_result ________________________

crud_result_instance = <app.crud.crud_result.CRUDResult object at 0x7fa478be3750>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344374532752'>
result_create_obj_round1_player1 = ResultCreate(game_id='test-game-r1', player_id='player-r1', round_number=1, profit_or_loss=2500.0, closing_capital=0.0...=1.1, environmental_score=85.5, total_yield=1000.0, total_revenue=5000.0, total_expenses_sum=2500.0, parcel_results=[])
mock_result_doc_ref = <MagicMock spec='DocumentReference' id='140344372791344'>

    @pytest.mark.asyncio
    async def test_create_player_round_result(
        crud_result_instance: CRUDResult,
        mock_firestore_db: MagicMock,
        result_create_obj_round1_player1: ResultCreate, # Use specific fixture
        mock_result_doc_ref: MagicMock
    ):
        with patch.object(CRUDResult, "_get_result_doc_ref", return_value=mock_result_doc_ref) as mock_get_ref, \
             patch("app.crud.crud_result.datetime") as mock_datetime:
            mock_datetime.now.return_value = FIXED_DATETIME_RESULT
            mock_datetime.UTC = timezone.utc # Ensure datetime.UTC is available if used by SUT

            created_result = await crud_result_instance.create_player_round_result(
                db=mock_firestore_db, obj_in=result_create_obj_round1_player1
            )

        mock_get_ref.assert_called_once_with(
            mock_firestore_db,
            result_create_obj_round1_player1.game_id,
            result_create_obj_round1_player1.player_id,
            result_create_obj_round1_player1.round_number
        )
        mock_result_doc_ref.set.assert_called_once()
        call_args, _ = mock_result_doc_ref.set.call_args
        set_data = call_args[0]

        assert set_data["game_id"] == result_create_obj_round1_player1.game_id
        assert set_data["player_id"] == result_create_obj_round1_player1.player_id
        assert set_data["profit_or_loss"] == result_create_obj_round1_player1.profit_or_loss # Changed
        assert isinstance(set_data["income_details"], dict)
>       assert set_data["income_details"]["crop_sales"] == result_create_obj_round1_player1.income_details.crop_sales
E       KeyError: 'crop_sales'

tests/crud/test_crud_result.py:160: KeyError
______________________ test_get_player_round_result_found ______________________

crud_result_instance = <app.crud.crud_result.CRUDResult object at 0x7fa478be3610>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344372794704'>
mock_result_doc_ref = <MagicMock spec='DocumentReference' id='140344372200176'>
result_create_obj_round1_player1 = ResultCreate(game_id='test-game-r1', player_id='player-r1', round_number=1, profit_or_loss=2500.0, closing_capital=0.0...=1.1, environmental_score=85.5, total_yield=1000.0, total_revenue=5000.0, total_expenses_sum=2500.0, parcel_results=[])

    @pytest.mark.asyncio
    async def test_get_player_round_result_found(
        crud_result_instance: CRUDResult,
        mock_firestore_db: MagicMock,
        mock_result_doc_ref: MagicMock,
        result_create_obj_round1_player1: ResultCreate
    ):
        mock_snapshot = create_mock_snapshot(result_create_obj_round1_player1, mock_result_doc_ref.id, FIXED_DATETIME_RESULT)
        # Pydantic model expects datetime obj for calculated_at, but Firestore to_dict might return ISO string
        # The create_mock_snapshot helper already sets calculated_at as datetime object in the dict it returns
        # so that CRUDBase can parse it directly.
        # If Firestore to_dict() returns ISO string, CRUDBase needs to handle parsing.
        # For this test, create_mock_snapshot returns datetime object for calculated_at.
        mock_result_doc_ref.get = AsyncMock(return_value=mock_snapshot)


        with patch.object(CRUDResult, "_get_result_doc_ref", return_value=mock_result_doc_ref) as mock_get_ref:
            result = await crud_result_instance.get_player_round_result(
                db=mock_firestore_db, game_id=TEST_GAME_ID, player_id=TEST_PLAYER_ID, round_number=TEST_ROUND_NUMBER
            )

        mock_get_ref.assert_called_once_with(mock_firestore_db, TEST_GAME_ID, TEST_PLAYER_ID, TEST_ROUND_NUMBER)
        assert isinstance(result, ResultInDB)

        # Comprehensive assertions for all fields
        assert result.id == mock_result_doc_ref.id
        assert result.game_id == result_create_obj_round1_player1.game_id
        assert result.player_id == result_create_obj_round1_player1.player_id
        assert result.round_number == result_create_obj_round1_player1.round_number
        assert result.calculated_at == FIXED_DATETIME_RESULT

        # Data integrity fields
        assert result.market_demand_multiplier == result_create_obj_round1_player1.market_demand_multiplier
        assert result.environmental_score == result_create_obj_round1_player1.environmental_score
        assert result.total_yield == result_create_obj_round1_player1.total_yield
        assert result.total_revenue == result_create_obj_round1_player1.total_revenue
        assert result.total_expenses_sum == result_create_obj_round1_player1.total_expenses_sum
        assert result.profit_or_loss == result_create_obj_round1_player1.profit_or_loss

        # Nested models - assuming create_mock_snapshot sets these up as dicts
        # and ResultInDB parses them into Pydantic models.
        assert isinstance(result.income_details, TotalIncome)
>       assert result.income_details.crop_sales == result_create_obj_round1_player1.income_details.crop_sales

tests/crud/test_crud_result.py:233:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TotalIncome(harvest_income=HarvestIncome(field_bean=0.0, barley=0.0, oat=0.0, potato=0.0, corn=0.0, rye=0.0, wheat=0.0, sugar_beet=0.0, animal_products=0.0, total=0.0), grand_total=0.0)
item = 'crop_sales'

    def __getattr__(self, item: str) -> Any:
        private_attributes = object.__getattribute__(self, '__private_attributes__')
        if item in private_attributes:
            attribute = private_attributes[item]
            if hasattr(attribute, '__get__'):
                return attribute.__get__(self, type(self))  # type: ignore

            try:
                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
                return self.__pydantic_private__[item]  # type: ignore
            except KeyError as exc:
                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
        else:
            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
            # See `BaseModel.__repr_args__` for more details
            try:
                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
            except AttributeError:
                pydantic_extra = None

            if pydantic_extra:
                try:
                    return pydantic_extra[item]
                except KeyError as exc:
                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
            else:
                if hasattr(self.__class__, item):
                    return super().__getattribute__(item)  # Raises AttributeError if appropriate
                else:
                    # this is the current error
>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E                   AttributeError: 'TotalIncome' object has no attribute 'crop_sales'

.venv/lib/python3.13/site-packages/pydantic/main.py:991: AttributeError
_______________________ test_get_all_results_for_player ________________________

crud_result_instance = <app.crud.crud_result.CRUDResult object at 0x7fa4789b8c30>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344375495040'>
result_create_obj_round1_player1 = ResultCreate(game_id='test-game-r1', player_id='player-r1', round_number=1, profit_or_loss=2500.0, closing_capital=0.0...=1.1, environmental_score=85.5, total_yield=1000.0, total_revenue=5000.0, total_expenses_sum=2500.0, parcel_results=[])
result_create_obj_round2_player1 = ResultCreate(game_id='test-game-r1', player_id='player-r1', round_number=2, profit_or_loss=1800.0, closing_capital=0.0...r=1.0, environmental_score=80.0, total_yield=900.0, total_revenue=4000.0, total_expenses_sum=2200.0, parcel_results=[])

    @pytest.mark.asyncio
    async def test_get_all_results_for_player(
        crud_result_instance: CRUDResult,
        mock_firestore_db: MagicMock,
        result_create_obj_round1_player1: ResultCreate,
        result_create_obj_round2_player1: ResultCreate
    ):
        # Arrange
        mock_collection_ref = mock_firestore_db.collection(RESULT_COLLECTION_NAME_TEMPLATE.format(game_id=TEST_GAME_ID))
        mock_query = AsyncMock(spec=AsyncQuery) # Object returned by where().order_by().limit()
        mock_collection_ref.where.return_value = mock_query
        mock_query.order_by.return_value = mock_query # Chain order_by
        mock_query.limit.return_value = mock_query    # Chain limit

        doc_id1 = f"{TEST_PLAYER_ID}_round_{TEST_ROUND_NUMBER}_result"
        doc_id2 = f"{TEST_PLAYER_ID}_round_{TEST_ROUND_NUMBER_2}_result"

        mock_snapshot1 = create_mock_snapshot(result_create_obj_round1_player1, doc_id1, FIXED_DATETIME_RESULT)
        # For second result, use a slightly different time if it matters, or same if not.
>       mock_snapshot2 = create_mock_snapshot(result_create_obj_round2_player1, doc_id2, FIXED_DATETIME_RESULT + datetime.timedelta(minutes=1))

tests/crud/test_crud_result.py:278:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
datetime = <module 'datetime' from '/home/swebot/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/datetime.py'>

    @classmethod
    def timedelta(cls, days=0, seconds=0, microseconds=0,
                  milliseconds=0, minutes=0, hours=0, weeks=0):
        """Represent the difference between two datetime objects.

        Supported units are weeks, days, hours, minutes, seconds,
        milliseconds, and microseconds.
        """
        d = days + weeks*7
        s = seconds + minutes*60 + hours*3600
        us = microseconds + milliseconds*1000

        # Get rid of all fractions of a day.
        if isinstance(s, float):
            dayfrac, s = _math.modf(s)
            us += dayfrac * (24.*3600.*1e6)
            s = int(s)

        # Get rid of all fractions of a second.
        if isinstance(us, float):
            secfrac, us = _math.modf(us)
            s += int(secfrac)
            us = int(round(us)) # Round to nearest microsecond.

        # Normalize everything to days, seconds, and microseconds.
        # Get rid of fractions of a microsecond.
        if abs(us) > _MAX_MICROSECOND:
            s += us // _MAX_MICROSECOND
            us %= _MAX_MICROSECOND

        if abs(s) > _SECONDS_PER_DAY:
            d += s // _SECONDS_PER_DAY
            s %= _SECONDS_PER_DAY

        if isinstance(d, float):
>           raise TypeError("float days is not supported")
E           TypeError: float days is not supported

/home/swebot/.local/share/uv/python/cpython-3.13.3-linux-x86_64-gnu/lib/python3.13/datetime.py:1567: TypeError
_____________________ test_get_all_results_for_game_round ______________________

crud_result_instance = <app.crud.crud_result.CRUDResult object at 0x7fa478b9d370>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344371761168'>
result_create_obj_round1_player1 = ResultCreate(game_id='test-game-r1', player_id='player-r1', round_number=1, profit_or_loss=2500.0, closing_capital=0.0...=1.1, environmental_score=85.5, total_yield=1000.0, total_revenue=5000.0, total_expenses_sum=2500.0, parcel_results=[])
result_create_obj_round1_player2 = ResultCreate(game_id='test-game-r1', player_id='player-r2', round_number=1, profit_or_loss=2900.0, closing_capital=0.0...=1.2, environmental_score=90.0, total_yield=1100.0, total_revenue=5500.0, total_expenses_sum=2600.0, parcel_results=[])

    @pytest.mark.asyncio
    async def test_get_all_results_for_game_round(
        crud_result_instance: CRUDResult,
        mock_firestore_db: MagicMock,
        result_create_obj_round1_player1: ResultCreate,
        result_create_obj_round1_player2: ResultCreate # Result from another player for the same round
    ):
        mock_collection_ref = mock_firestore_db.collection(RESULT_COLLECTION_NAME_TEMPLATE.format(game_id=TEST_GAME_ID))
        mock_query = AsyncMock(spec=AsyncQuery)
        mock_collection_ref.where.return_value = mock_query # query.where()

        doc_id1 = f"{TEST_PLAYER_ID}_round_{TEST_ROUND_NUMBER}_result"
        doc_id2 = f"{TEST_PLAYER_ID_2}_round_{TEST_ROUND_NUMBER}_result"

        mock_snapshot1 = create_mock_snapshot(result_create_obj_round1_player1, doc_id1, FIXED_DATETIME_RESULT)
        mock_snapshot2 = create_mock_snapshot(result_create_obj_round1_player2, doc_id2, FIXED_DATETIME_RESULT)


        async def stream_results_gen(*args, **kwargs):
            yield mock_snapshot1
            yield mock_snapshot2
        mock_query.stream = MagicMock(return_value=stream_results_gen())

        results = await crud_result_instance.get_all_results_for_game_round(
            db=mock_firestore_db, game_id=TEST_GAME_ID, round_number=TEST_ROUND_NUMBER
        )

        mock_collection_ref.where.assert_called_once_with(field="round_number", op_string="==", value=TEST_ROUND_NUMBER)
        assert len(results) == 2
        # Order is not guaranteed by this query, so check for presence by iterating
        expected_results_map = {
            doc_id1: result_create_obj_round1_player1,
            doc_id2: result_create_obj_round1_player2
        }
        assert len(results) == len(expected_results_map)

        for res in results:
            assert res.id in expected_results_map
            expected_obj = expected_results_map[res.id]

            assert res.player_id == expected_obj.player_id
            assert res.round_number == TEST_ROUND_NUMBER # All results are for this round
            assert res.profit_or_loss == expected_obj.profit_or_loss
            assert res.calculated_at == FIXED_DATETIME_RESULT # Both snapshots used same time
            assert res.market_demand_multiplier == expected_obj.market_demand_multiplier
            assert res.environmental_score == expected_obj.environmental_score
            assert res.total_yield == expected_obj.total_yield
>           assert res.income_details.crop_sales == expected_obj.income_details.crop_sales

tests/crud/test_crud_result.py:393:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = TotalIncome(harvest_income=HarvestIncome(field_bean=0.0, barley=0.0, oat=0.0, potato=0.0, corn=0.0, rye=0.0, wheat=0.0, sugar_beet=0.0, animal_products=0.0, total=0.0), grand_total=0.0)
item = 'crop_sales'

    def __getattr__(self, item: str) -> Any:
        private_attributes = object.__getattribute__(self, '__private_attributes__')
        if item in private_attributes:
            attribute = private_attributes[item]
            if hasattr(attribute, '__get__'):
                return attribute.__get__(self, type(self))  # type: ignore

            try:
                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items
                return self.__pydantic_private__[item]  # type: ignore
            except KeyError as exc:
                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
        else:
            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.
            # See `BaseModel.__repr_args__` for more details
            try:
                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')
            except AttributeError:
                pydantic_extra = None

            if pydantic_extra:
                try:
                    return pydantic_extra[item]
                except KeyError as exc:
                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc
            else:
                if hasattr(self.__class__, item):
                    return super().__getattribute__(item)  # Raises AttributeError if appropriate
                else:
                    # this is the current error
>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')
E                   AttributeError: 'TotalIncome' object has no attribute 'crop_sales'

.venv/lib/python3.13/site-packages/pydantic/main.py:991: AttributeError
___________________________ test_create_player_round ___________________________

crud_round_instance = <app.crud.crud_round.CRUDRound object at 0x7fa478be3750>
mock_firestore_db = <AsyncMock spec='AsyncClient' id='140344374728688'>
round_create_obj = RoundCreate(game_id='test-game-round-crud', player_id='player-round-crud', round_number=1, status=<RoundStatus.PENDING: 'pending'>, decisions...control=False, attempt_organic_certification=False, machine_investment_level=0), is_submitted=False, submitted_at=None)
initial_parcels_data = [{'crop_sequence_effect': <CropSequenceEffect.NONE: 'keine'>, 'current_plantation': 'Brachland', 'last_harvest_outcome...on': 'Brachland', 'last_harvest_outcome_category': <HarvestOutcome.NONE: 'keiner'>, 'last_harvest_yield_dt': 0.0, ...}]
mock_round_doc_ref = <MagicMock spec='DocumentReference' id='140344374723312'>
mock_field_state_doc_ref = <MagicMock spec='DocumentReference' id='140344374730032'>

    @pytest.mark.asyncio
    async def test_create_player_round(
        crud_round_instance: CRUDRound,
        mock_firestore_db: MagicMock, # From conftest.py
        round_create_obj: RoundCreate,
        initial_parcels_data: list[dict],
        mock_round_doc_ref: MagicMock,
        mock_field_state_doc_ref: MagicMock
    ):
        # Arrange
        # Patch the helper methods that construct doc refs
        with patch.object(CRUDRound, "_get_round_doc_ref", return_value=mock_round_doc_ref) as mock_get_round_ref, \
             patch.object(CRUDRound, "_get_field_state_doc_ref", return_value=mock_field_state_doc_ref) as mock_get_field_ref, \
             patch("app.crud.crud_round.datetime") as mock_datetime: # Patch datetime used in crud_round.py

            mock_datetime.now.return_value = FIXED_DATETIME_ROUND
            mock_datetime.UTC = timezone.utc # Make sure timezone.utc is available if SUT uses datetime.UTC

            # Act
            created_round = await crud_round_instance.create_player_round(
                db=mock_firestore_db, obj_in=round_create_obj, initial_parcels=initial_parcels_data
            )

        # Assert
        mock_get_round_ref.assert_called_once_with(
            mock_firestore_db, TEST_GAME_ID_R, TEST_PLAYER_ID_R, TEST_ROUND_NUMBER_R
        )
        mock_get_field_ref.assert_called_once_with(
            mock_firestore_db, TEST_GAME_ID_R, TEST_PLAYER_ID_R, TEST_ROUND_NUMBER_R
        )

        # Check round document creation
        mock_round_doc_ref.set.assert_called_once()
        round_set_args, _ = mock_round_doc_ref.set.call_args
        round_set_data = round_set_args[0]

        assert round_set_data["game_id"] == round_create_obj.game_id
        assert round_set_data["player_id"] == round_create_obj.player_id
        assert round_set_data["round_number"] == round_create_obj.round_number
        assert round_set_data["is_submitted"] == round_create_obj.is_submitted
>       assert round_set_data["status"] == round_create_obj.status.value
E       AttributeError: 'str' object has no attribute 'value'

tests/crud/test_crud_round.py:107: AttributeError
=========================== short test summary info ============================
FAILED tests/crud/test_crud_admin.py::test_create_admin_with_uid - AttributeE...
FAILED tests/crud/test_crud_admin.py::test_get_admin_by_email_found - Asserti...
FAILED tests/crud/test_crud_admin.py::test_update_admin - AttributeError: 'st...
FAILED tests/crud/test_crud_admin.py::test_update_admin_ignores_password - At...
FAILED tests/crud/test_crud_player.py::test_create_player_with_uid - KeyError...
FAILED tests/crud/test_crud_player.py::test_get_player_by_email_found - Asser...
FAILED tests/crud/test_crud_player.py::test_update_player - AttributeError: '...
FAILED tests/crud/test_crud_player.py::test_get_player_by_id_found - Attribut...
FAILED tests/crud/test_crud_result.py::test_create_player_round_result - KeyE...
FAILED tests/crud/test_crud_result.py::test_get_player_round_result_found - A...
FAILED tests/crud/test_crud_result.py::test_get_all_results_for_player - Type...
FAILED tests/crud/test_crud_result.py::test_get_all_results_for_game_round - ...
FAILED tests/crud/test_crud_round.py::test_create_player_round - AttributeErr...
======================== 13 failed, 31 passed in 1.22s =========================
 /app/backend/.venv/lib/python3.13/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
